<?php

namespace AppBundle\Form\Type;

use AppBundle\Entity\User;
use AppBundle\Privacy\PrivacySettings;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

/**
 * Class PrivacySettingsType
 * @package AppBundle\Form\Type
 */
class PrivacySettingsType extends SingleItemType
{
    private $classicChoice = [1 => 'Public', 0 => 'Private'];

    /** @var User */
    protected $user;


    /**
     * @param OptionsResolver $resolver
     *
     * @throws \Symfony\Component\OptionsResolver\Exception\AccessException
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        parent::configureOptions($resolver); // TODO: Change the autogenerated stub

        $resolver->setDefault('user', null);
        $resolver->setDefault('data_class', PrivacySettings::class);
    }


    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function setBirthDateStyle(FormBuilderInterface $builder, array $options)
    {
        $user = $options['user'];

        if (is_null($user->getAge())) {
            $builder->add(
                'birthDateStyle',
                ChoiceType::class,
                [
                    'choices' => [
                        0,
                        'Birth date is not set.'
                    ],
                    'disabled' => true,
                    'attr' => ['icon' => 'ff-time']
                ]
            );
        } else {
            $builder->add(
                'birthDateStyle',
                ChoiceType::class,
                [
                    'choices' => [
                        PrivacySettings::FORMAT_BIRTH_DATE_NONE => 'Private',
                        PrivacySettings::FORMAT_BIRTH_DATE_AGE => $this->user->getAge() . ' years old',
                        PrivacySettings::FORMAT_BIRTH_DATE_DAY => $this->user->getDateOfBirth()->format("jS \\o\\f F"),
                        PrivacySettings::FORMAT_BIRTH_DATE_FULL => $this->user->getDateOfBirth()->format('m/d/Y'),
                    ],
                    'attr' => ['icon' => 'ff-time']
                ]
            );
        }
    }


    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function setPublicProfile(FormBuilderInterface $builder, array $options)
    {
        $builder->add(
            'publicProfile',
            ChoiceType::class,
            ['choices' => $this->classicChoice, 'attr' => ['icon' => 'ff-person']]
        );
    }


    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function setDisplayEmail(FormBuilderInterface $builder, array $options)
    {
        $builder->add(
            'displayEmail',
            ChoiceType::class,
            ['choices' => $this->classicChoice, 'attr' => ['icon' => 'ff-sign-mail']]
        );
    }


    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function setDisplayLocation(FormBuilderInterface $builder, array $options)
    {
        $builder->add(
            'displayLocation',
            ChoiceType::class,
            ['choices' => $this->classicChoice, 'attr' => ['icon' => 'ff-map-pointer']]
        );
    }


    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function setDisplayForumActivity(FormBuilderInterface $builder, array $options)
    {
        $builder->add(
            'displayForumActivity',
            ChoiceType::class,
            ['choices' => $this->classicChoice, 'attr' => ['icon' => 'ff-chat-conversation']]
        );
    }


    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function setDisplayProgressGraph(FormBuilderInterface $builder, array $options)
    {
        $builder->add(
            'displayProgressGraph',
            ChoiceType::class,
            ['choices' => $this->classicChoice, 'attr' => ['icon' => 'ff-graph']]
        );
    }


    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function setDisplayFullName(FormBuilderInterface $builder, array $options)
    {
        $builder->add(
            'displayFullName',
            ChoiceType::class,
            ['choices' => $this->classicChoice, 'attr' => ['icon' => 'ff-graph']]
        );
    }


    /**
     * @param FormBuilderInterface $builder
     * @param array $options
     */
    public function setDisplaySocialMedia(FormBuilderInterface $builder, array $options)
    {
        $builder->add(
            'displaySocialMedia',
            ChoiceType::class,
            ['choices' => $this->classicChoice, 'attr' => ['icon' => 'ff-social-stream']]
        );
    }
}
